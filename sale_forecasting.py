# -*- coding: utf-8 -*-
"""sale forecasting.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Y7sh6xGdEbZVDY25kpo49Pw_n2Vngum8
"""

import pandas as pd
import numpy as np

"""# Data Collection

https://community.tableau.com/s/question/0D54T00000CWeX8SAL/sample-superstore-sales-excelxls
"""

from google.colab import drive
drive.mount('/content/drive')

df = pd.read_excel('/content/drive/MyDrive/Project/store.xls')

df

df.columns

df.info()

unique_categories = df['Category'].unique()
unique_categories

furniture = df.loc[df['Category'] == 'Furniture']
office_supplies = df.loc[df['Category'] == 'Office Supplies']
technology = df.loc[df['Category'] == 'Technology']

office_supplies

office_supplies['Order Date'].min(), office_supplies['Order Date'].max()

"""# Data Preprocessing

เอา columns ที่ไม่ต้องการใช้ออก , check missing values, รวม sales ตามวันที่
"""

cols = ['Row ID', 'Order ID', 'Ship Date', 'Ship Mode', 'Customer ID', 'Customer Name', 'Segment', 'Country', 'City', 'State', 'Postal Code', 'Region', 'Product ID', 'Category', 'Sub-Category', 'Product Name', 'Quantity', 'Discount', 'Profit']
office_supplies.drop(cols, axis=1, inplace=True)
office_supplies = office_supplies.sort_values('Order Date')
office_supplies.isnull().sum()

office_supplies = office_supplies.groupby('Order Date')['Sales'].sum().reset_index()

office_supplies

"""# Time Series Decomposition"""

import matplotlib.pyplot as plt
import statsmodels.api as sm

office_supplies = office_supplies.set_index('Order Date')
office_supplies.index

y = office_supplies['Sales'].resample('MS').mean()

y['2017':]

y.plot(figsize=(15, 6))
plt.show()

from pylab import rcParams
rcParams['figure.figsize'] = 18, 8
decomposition = sm.tsa.seasonal_decompose(y, model='additive')
fig = decomposition.plot()
plt.show()

"""# Modeling"""

import itertools

"""ARIMA"""

p = d = q = range(0, 2)
pdq = list(itertools.product(p, d, q))
seasonal_pdq = [(x[0], x[1], x[2], 12) for x in list(itertools.product(p, d, q))]
print('Examples of parameter combinations for Seasonal ARIMA...')
print('SARIMAX: {} x {}'.format(pdq[1], seasonal_pdq[1]))
print('SARIMAX: {} x {}'.format(pdq[1], seasonal_pdq[2]))
print('SARIMAX: {} x {}'.format(pdq[2], seasonal_pdq[3]))
print('SARIMAX: {} x {}'.format(pdq[2], seasonal_pdq[4]))

for param in pdq:
    for param_seasonal in seasonal_pdq:
        try:
            mod = sm.tsa.statespace.SARIMAX(y,
                                            order=param,
                                            seasonal_order=param_seasonal,
                                            enforce_stationarity=False,
                                            enforce_invertibility=False)
            results = mod.fit()
            print('ARIMA{}x{}12 - AIC:{}'.format(param, param_seasonal, results.aic))
        except Exception as e:
            print(e)
            continue

"""
Fitting the ARIMA model"""

mod = sm.tsa.statespace.SARIMAX(y,
                                order=(1, 1, 1),
                                seasonal_order=(1, 1, 1, 12),
                                enforce_invertibility=False)
results = mod.fit()
print(results.summary().tables[1])

results.plot_diagnostics(figsize=(16, 8))
plt.show()

pred = results.get_prediction(start=pd.to_datetime('2017-01-01'), dynamic=False)
pred_ci = pred.conf_int()
ax = y['2014':].plot(label='observed')
pred.predicted_mean.plot(ax=ax, label='One-step ahead Forecast', alpha=.7, figsize=(14, 7))
ax.fill_between(pred_ci.index,
                pred_ci.iloc[:, 0],
                pred_ci.iloc[:, 1], color='k', alpha=.2)
ax.set_xlabel('Date')
ax.set_ylabel('Office Supplies Sales')
plt.legend()
plt.show()

"""# Model Evaluation"""

y_forecasted = pred.predicted_mean
y_truth = y['2017-01-01':]
mse = ((y_forecasted - y_truth) ** 2).mean()
print('The Mean Squared Error of our forecasts is {}'.format(round(mse, 2)))
print('The Root Mean Squared Error of our forecasts is {}'.format(round(np.sqrt(mse), 2)))

pred_uc = results.get_forecast(steps=100)
pred_ci = pred_uc.conf_int()
ax = y.plot(label='observed', figsize=(14, 7))
pred_uc.predicted_mean.plot(ax=ax, label='Forecast')
ax.fill_between(pred_ci.index,
                pred_ci.iloc[:, 0],
                pred_ci.iloc[:, 1], color='k', alpha=.25)
ax.set_xlabel('Date')
ax.set_ylabel('Office Supplies Sales')
plt.legend()
plt.show()

"""# Furniture vs Office Supplies vs Technology

อย่าลืม run data collection ใหม่
"""

df = pd.read_excel('/content/drive/MyDrive/Project/store.xls')
furniture = df.loc[df['Category'] == 'Furniture']
office_supplies = df.loc[df['Category'] == 'Office Supplies']
technology = df.loc[df['Category'] == 'Technology']

furniture.shape, office_supplies.shape , technology.shape

cols = ['Row ID', 'Order ID', 'Ship Date', 'Ship Mode', 'Customer ID', 'Customer Name', 'Segment', 'Country', 'City', 'State', 'Postal Code', 'Region', 'Product ID', 'Category', 'Sub-Category', 'Product Name', 'Quantity', 'Discount', 'Profit']
furniture.drop(cols, axis=1, inplace=True)
office_supplies.drop(cols, axis=1, inplace=True)
technology.drop(cols, axis=1, inplace=True)

furniture = furniture.sort_values('Order Date')
office_supplies = office_supplies.sort_values('Order Date')
technology = technology.sort_values('Order Date')

furniture = furniture.groupby('Order Date')['Sales'].sum().reset_index()
office_supplies = office_supplies.groupby('Order Date')['Sales'].sum().reset_index()
technology = technology.groupby('Order Date')['Sales'].sum().reset_index()

furniture = furniture.set_index('Order Date')
office_supplies = office_supplies.set_index('Order Date')
technology = technology.set_index('Order Date')

y_furniture = furniture['Sales'].resample('MS').mean()
y_office_supplies = office_supplies['Sales'].resample('MS').mean()
y_technology = technology['Sales'].resample('MS').mean()

furniture = pd.DataFrame({'Order Date':y_furniture.index, 'Sales':y_furniture.values})
office_supplies = pd.DataFrame({'Order Date': y_office_supplies.index, 'Sales': y_office_supplies.values})
technology = pd.DataFrame({'Order Date': y_technology.index, 'Sales': y_technology.values})

store = furniture.merge(office_supplies, on='Order Date', how='inner')
store = store.merge(technology, on='Order Date', how='inner')
store.rename(columns={'Sales_x': 'furniture_sales', 'Sales_y': 'office_supplies_sales', 'Sales': 'technology_sales'}, inplace=True)
store.head()

plt.figure(figsize=(20, 8))
plt.plot(store['Order Date'], store['furniture_sales'], 'b-', label = 'furniture')
plt.plot(store['Order Date'], store['office_supplies_sales'], 'r-', label = 'office supplies')
plt.plot(store['Order Date'], store['technology_sales'], 'g-', label = 'technology')
plt.xlabel('Date'); plt.ylabel('Sales'); plt.title('Sales of Furniture & Office Supplies & Technology')
plt.legend();

"""Time Series Modeling"""

from prophet import Prophet
furniture = furniture.rename(columns={'Order Date': 'ds', 'Sales': 'y'})
furniture_model = Prophet(interval_width=0.95)
furniture_model.fit(furniture)
office_supplies = office_supplies.rename(columns={'Order Date': 'ds', 'Sales': 'y'})
office_supplies_model = Prophet(interval_width=0.95)
office_supplies_model.fit(office_supplies)
technology = technology.rename(columns={'Order Date': 'ds', 'Sales': 'y'})
technology_model = Prophet(interval_width=0.95)
technology_model.fit(technology)

furniture_forecast = furniture_model.make_future_dataframe(periods=36, freq='MS')
furniture_forecast = furniture_model.predict(furniture_forecast)
office_supplies_forecast = office_supplies_model.make_future_dataframe(periods=36, freq='MS')
office_supplies_forecast = office_supplies_model.predict(office_supplies_forecast)
technology_forecast = technology_model.make_future_dataframe(periods=36, freq='MS')
technology_forecast = technology_model.predict(technology_forecast)

plt.figure(figsize=(18, 6))
furniture_model.plot(furniture_forecast, xlabel = 'Date', ylabel = 'Sales')
plt.title('Furniture Sales');

plt.figure(figsize=(18, 6))
office_supplies_model.plot(office_supplies_forecast, xlabel = 'Date', ylabel = 'Sales')
plt.title('Office Supplies Sales');

plt.figure(figsize=(18, 6))
technology_model.plot(technology_forecast, xlabel = 'Date', ylabel = 'Sales')
plt.title('Technology Sales');

"""Compare"""

furniture_names = ['furniture_%s' % column for column in furniture_forecast.columns]
office_supplies_names = ['office_supplies_%s' % column for column in office_supplies_forecast.columns]
technology_names = ['technology_%s' % column for column in technology_forecast.columns]

merge_furniture_forecast = furniture_forecast.copy()
merge_office_supplies_forecast = office_supplies_forecast.copy()
merge_technology_forecast = technology_forecast.copy()

merge_furniture_forecast.columns = furniture_names
merge_office_supplies_forecast.columns = office_supplies_names
merge_technology_forecast.columns = technology_names

forecast = pd.merge(merge_furniture_forecast, merge_office_supplies_forecast, how='inner', left_on='furniture_ds', right_on='office_supplies_ds')
forecast = pd.merge(forecast, merge_technology_forecast, how='inner', left_on='furniture_ds', right_on='technology_ds')
forecast = forecast.rename(columns={'furniture_ds': 'Date'}).drop(['office_supplies_ds', 'technology_ds'], axis=1)
forecast.head()

plt.figure(figsize=(10, 7))
plt.plot(forecast['Date'], forecast['furniture_trend'], 'b-')
plt.plot(forecast['Date'], forecast['office_supplies_trend'], 'r-')
plt.plot(forecast['Date'], forecast['technology_trend'], 'g-')
plt.legend(); plt.xlabel('Date'); plt.ylabel('Sales')
plt.title('Furniture vs Office Supplies Sales Trend vs Technology');

plt.figure(figsize=(10, 7))
plt.plot(forecast['Date'], forecast['furniture_yhat'], 'b-')
plt.plot(forecast['Date'], forecast['office_supplies_yhat'], 'r-')
plt.plot(forecast['Date'], forecast['technology_yhat'], 'g-')
plt.legend(); plt.xlabel('Date'); plt.ylabel('Sales')
plt.title('Furniture vs Office Supplies Sales Trend vs Technology Estimate');

"""Inspect different trends of these three categories"""

furniture_model.plot_components(furniture_forecast);

office_supplies_model.plot_components(office_supplies_forecast);

technology_model.plot_components(technology_forecast);

"""Model Evaluation"""

from sklearn.metrics import mean_absolute_error

furniture_actual = furniture['y']
furniture_predicted = furniture_model.predict(furniture)
furniture_predicted = furniture_predicted['yhat'].tail(len(furniture_actual))
furniture_mae = mean_absolute_error(furniture_actual, furniture_predicted)

office_supplies_actual = office_supplies['y']
office_supplies_predicted = office_supplies_model.predict(office_supplies)
office_supplies_predicted = office_supplies_predicted['yhat'].tail(len(office_supplies_actual))
office_supplies_mae = mean_absolute_error(office_supplies_actual, office_supplies_predicted)

technology_actual = technology['y']
technology_predicted = technology_model.predict(technology)
technology_predicted = technology_predicted['yhat'].tail(len(technology_actual))
technology_mae = mean_absolute_error(technology_actual, technology_predicted)

print("Mean Absolute Error (MAE) - Furniture: ", furniture_mae)
print("Mean Absolute Error (MAE) - Office Supplies: ", office_supplies_mae)
print("Mean Absolute Error (MAE) - Technology: ", technology_mae)

from sklearn.metrics import mean_squared_error
import numpy as np


furniture_rmse = np.sqrt(mean_squared_error(furniture_actual, furniture_predicted))
office_supplies_rmse = np.sqrt(mean_squared_error(office_supplies_actual, office_supplies_predicted))
technology_rmse = np.sqrt(mean_squared_error(technology_actual, technology_predicted))

print("Root Mean Squared Error (RMSE) - Furniture: ", furniture_rmse)
print("Root Mean Squared Error (RMSE) - Office Supplies: ", office_supplies_rmse)
print("Root Mean Squared Error (RMSE) - Technology: ", technology_rmse)

import matplotlib.pyplot as plt

plt.figure(figsize=(10, 7))
plt.plot(furniture['ds'], furniture_actual, label='Actual Furniture Sales')
plt.plot(furniture['ds'], furniture_predicted, label='Predicted Furniture Sales')
plt.xlabel('Date')
plt.ylabel('Sales')
plt.title('Furniture Sales - Actual vs. Predicted')
plt.legend()
plt.show()

plt.figure(figsize=(10, 7))
plt.plot(office_supplies['ds'], office_supplies_actual, label='Actual Office Supplies Sales')
plt.plot(office_supplies['ds'], office_supplies_predicted, label='Predicted Office Supplies Sales')
plt.xlabel('Date')
plt.ylabel('Sales')
plt.title('Office Supplies Sales - Actual vs. Predicted')
plt.legend()
plt.show()

plt.figure(figsize=(10, 7))
plt.plot(technology['ds'], technology_actual, label='Actual Technology Sales')
plt.plot(technology['ds'], technology_predicted, label='Predicted Technology Sales')
plt.xlabel('Date')
plt.ylabel('Sales')
plt.title('Technology Sales - Actual vs. Predicted')
plt.legend()
plt.show()